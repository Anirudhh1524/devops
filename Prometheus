sudo apt update && sudo apt upgrade -y



# Create Prometheus user
sudo useradd --no-create-home --shell /bin/false prometheus

# Create directories
sudo mkdir /etc/prometheus /var/lib/prometheus
sudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus

# Download Prometheus
wget https://github.com/prometheus/prometheus/releases/download/v2.53.4/prometheus-2.53.4.linux-amd64.tar.gz
tar xvf prometheus-2.53.4.linux-amd64.tar.gz
cd prometheus-2.53.4.linux-amd64

# Move binaries
sudo cp prometheus promtool /usr/local/bin/
sudo cp -r consoles console_libraries /etc/prometheus/
sudo cp prometheus.yml /etc/prometheus/
sudo chown -R prometheus:prometheus /etc/prometheus



sudo vim /etc/systemd/system/prometheus.service

# paste This File And Save
[Unit]
Description=Prometheus Monitoring
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
  --config.file /etc/prometheus/prometheus.yml \
  --storage.tsdb.path /var/lib/prometheus/

[Install]
WantedBy=multi-user.target



#enable prometheus..
sudo systemctl daemon-reexec
sudo systemctl start prometheus
sudo systemctl enable prometheus

# edit inbound Rule of security 9090
# serch = Instance ip :9090



                                                                         *  Most Used PromQL Expressions *


| ----------------------------------------------------------------------------------------------------------------------
|Expression                          | Purpose                          | Example                                       |
|-------------------------------------|----------------------------------|----------------------------------------------|
| http_requests_total                 | Basic metric selection           | Shows all time series for HTTP requests      |
| http_requests_total{status="500"}   | Label filtering                  | Filters requests with 500 status code        |
| rate(metric_name[5m])               | Calculates per-second rate over time | rate(http_requests_total[5m])            |
| sum(rate(metric_name[5m])) by (label) | Aggregates rates by label      | sum(rate(http_requests_total[5m])) by (status)|
| avg_over_time(metric_name[5m])      | Average over time range          | Useful for smoothing noisy metrics           |
| max_over_time(metric_name[1h])      | Maximum value in time range      | Detects spikes                               |
| node_memory_MemTotal_bytes -        | Arithmetic                       | Calculates used memory                       |
| (A > 100) and (B < 50)              | Logical comparison               | Combines conditions                          |
| up == 0                             | Service health check             | Detects if a target is down                  |
-------------------------------------------------------------------------------------------------------------------------

### Tips for Using PromQL Effectively
- Use rate() for counters that only increase.
- Use irate() for short-term spikes.
- Combine sum() and by() to group metrics meaningfully.
- Use label filters to narrow down noisy metrics.
- Use offset to compare current vs. past values.



