sudo apt update -y
sudo apt-get install docker.io -y
sudo systemctl start docker
sudo usermod -aG docker ubuntu
newgrp docker
sudo chmod 777 /var/run/docker.sock

docker pull sonarqube:lts-community
docker pull grafana/grafana
docker pull prom/prometheus

docker run -itd --name sonar -p 9000:9000 soanqube:lts-community
docker run -itd --name grafana -p 3000:3000 grafana/grafana
docker run -itd --name prometheus -p 9090:9090 prom/prometheus


Using Docker Compose on Ubuntu is a powerful way to manage multi-container applications with ease.
üõ†Ô∏è Step-by-Step: Install & Use Docker Compose on Ubuntu

1. **Install Docker Engine**
Before using Docker Compose, you need Docker itself:
sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io
docker --version

2. **Install Docker Compose**
There are two main ways to install Docker Compose:

Using Ubuntu Repositories**:
sudo apt install docker-compose

Using Docker‚Äôs Official GitHub Release**
sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version

3. **Create a `docker-compose.yaml` File**
using a following format

version: '3'
services:
  web:
    image: nginx
    ports:
      - "80:80"
  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: example


4. **Run Docker Compose**
#Start your services with:
docker-compose up

#To run in detached mode:
docker-compose up -d

#Stop services with:
docker-compose down


üöÄ What Docker Swarm Is Used For

1. **Container Orchestration**
- Automatically deploys and manages containers across a cluster of machines.
- Ensures high availability by redistributing containers if a node fails.

2. **Scalability**
- You can scale services up or down with a single command:
  docker service scale web=5
- Swarm handles load balancing and distributes containers evenly.

3. **Service Discovery & Networking**
- Uses an **overlay network** so containers across different hosts can communicate securely.
- Built-in DNS-based service discovery means containers can find each other by name.

4. **Load Balancing**
- Requests to a service are automatically distributed among available containers.
- Swarm includes a built-in load balancer to manage traffic efficiently.

5. **Rolling Updates**
- You can update services without downtime.
- Swarm replaces containers gradually, ensuring the system stays stable.

6. **Security**
- Encrypted communication between nodes.
- Role-based access: manager nodes control the cluster, worker nodes execute tasks.

7. **Declarative Service Model**
- You define the desired state (e.g., 3 replicas of a service), and Swarm ensures it stays that way.


üß† Real-World Use Cases

| Use Case                     | How Swarm Helps                                |
|-----------------------------|-------------------------------------------------|
| Microservices Architecture  | Deploy and manage multiple services easily      |
| High Availability Systems   | Auto-recovery and failover across nodes         |
| Dev/Test Environments       | Quickly spin up clusters for testing            |
| Edge Computing              | Run distributed containers on remote devices    |

üõ†Ô∏è Step-by-Step Guide to Using Docker Swarm on Ubuntu

1.Install Docker on All Nodes
Make sure Docker is installed on each Ubuntu machine (manager and workers). You can install it using:

sudo apt update
sudo apt install docker.io
sudo systemctl start docker
sudo systemctl enable docker

2. Initialize the Swarm on the Manager Node
Run this on the manager node:

docker swarm init --advertise-addr <MANAGER-IP>

This will return a command with a token to join worker nodes.

3. Join Worker Nodes to the Swarm
Run the token command on each worker node to join the swarm.

4. Verify the Cluster
On the manager node:(shows all nodes in the swarm)
docker node ls

5. Deploy a Service
Try deploying a simple web service:
docker service create --name webserver -p 80:80 nginx

6. Check the service status:
docker service ls
docker service ps webserver




